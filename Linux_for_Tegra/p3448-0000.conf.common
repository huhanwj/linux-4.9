#!/bin/bash

# Copyright (c) 2018-2020, NVIDIA CORPORATION.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Process_board_version:
# Added to read the board id and board version from EEPROM on main board.
# undef for non eeprom boards.
process_board_version()
{
	local board_id="${1}";
	local board_version="${2}";
	local board_sku="${3}";
	local bdv=${board_version^^};
	local bid=${board_id^^};

	echo "Board ID(${board_id}) version(${board_version}) " >/dev/stderr;

	if [ "${bdv}" \< "100" ]; then
		dtbfab=a00;
	elif [ "${bdv}" \< "200" ]; then
		dtbfab=a01;
	elif [ "${bdv}" \< "300" ]; then
		dtbfab=a02;
	else
		dtbfab=b00;
	fi

	if [ "${board_sku}" = "" ]; then
		board_sku="0000";
	fi;

	if [ "${board_sku}" = "0003" ]; then
		DTB_FILE="tegra210-p3448-${board_sku}-p3542-0000.dtb";
		if [ "${USE_UBOOT}" -eq 1 ]; then
			DFLT_KERNEL_IMAGE="bootloader/${target_board}/p3541-0000/u-boot.bin";
		fi;
	else
		DTB_FILE="tegra210-p3448-${board_sku}-p3449-0000-${dtbfab}.dtb";
		if [ "${USE_UBOOT}" -eq 1 ]; then
			DFLT_KERNEL_IMAGE="bootloader/${target_board}/p3450-0000/u-boot.bin";
		fi;
	fi;
}

# t21_prepare_rcmboot_args:
# Fill the args for doing rcm boot
function t21x_prepare_rcmboot_args() {
	T21RCMARGS+="--bldtb ${BL_DIR}/signed/${dtbfilename}.encrypt "
	T21RCMARGS+="--kerneldtb ${BL_DIR}/signed/${dtbfilename}.encrypt "
	T21RCMARGS+="--lnx ${BL_DIR}/${localbootfile} "
	T21RCMARGS+="--tos ${BL_DIR}/signed/${tosfilename}.encrypt "
	T21RCMARGS+="--eks ${BL_DIR}/${eksfilename} "
	T21RCMARGS+="--applet ${rcmsosfile} "
	T21RCMARGS+="--securedev "
}

# t21_sign_rcmboot_images:
# Sign the images necessary for doing rcm boot
function t21x_sign_rcmboot_images() {
	# sign images for rcm boot on
	local args=""
	local command="sign"
	local localcfgfile=""

	if [[ ${cfgfile} =~ \.xml$ ]]; then
		localcfgfile=flash.xml
	else
		localcfgfile=flash.cfg
	fi

	mkfilesoft rcmtbcfile	"${RCMTBCFILE}"	"${LDK_DIR}/${RCM_TBCFILE}"

	# create "tmp_flash.xml" and modify it
	local tmpcfgfile=tmp_${localcfgfile}
	cp "${BL_DIR}/${localcfgfile}" "${BL_DIR}/${tmpcfgfile}"
	sed -i "s/${tbcfilename}/${rcmtbcfilename}/" "${BL_DIR}/${tmpcfgfile}"
	sed -i "s/${localcfgfile}/${tmpcfgfile}/" "${BL_DIR}/${tmpcfgfile}"

	# prepare args for tegraflash.py
	if [ "${CHIPMAJOR}" != "" ]; then
		args+="--chip \"${CHIPID} ${CHIPMAJOR}\" "
	else
		args+="--chip \"${CHIPID}\" "
	fi
	args+="--applet \"${LDK_DIR}/${SOSFILE}\" "
	args+="--bct ${bctfilename} "
	args+="--cfg ${tmpcfgfile} "
	args+="--cmd \"${command}\" "

	local cmd="./tegraflash.py ${args}"
	pushd "${BL_DIR}" > /dev/null 2>&1
	echo "Signing command: ${cmd}"
	eval "${cmd}"
	chkerr "Signing images for rcm boot failed."
	popd > /dev/null 2>&1

	# remove "tmp_flash.xml"
	rm "${BL_DIR}/${tmpcfgfile}"

	# prepare rcm images
	mkfilepath rcmflasher	"${LDK_DIR}/${RCM_FLASHER}"	""
	mkfilepath rcmbctfile	"${LDK_DIR}/${RCM_BCTFILE}"	""
	mkfilepath rcmsosfile	"${LDK_DIR}/${RCM_SOSFILE}"	""
}

#
# p3448-0000.conf.common: configuration for Nano

ODMDATA=0xa4000;
CHIPID=0x21;
EMMC_BCT=P3448_A00_lpddr4_204Mhz_P987.cfg;
#BOOTPARTSIZE=4194304;
EMMCSIZE=4194304;
ITS_FILE=;
# To configure whether to use U-Boot,
# do either of the following before running flash.sh:
# 1) Set environment variable USE_UBOOT to 0 or 1.
# 2) Edit the line below to set USE_UBOOT to 0 or 1.
if [ -z "${USE_UBOOT}" ]; then
	USE_UBOOT=1;
fi;
ROOTFSSIZE=14GiB;
CMDLINE_ADD="console=ttyS0,115200n8 console=tty0 fbcon=map:0 net.ifnames=0";
target_board="t210ref";
ROOT_DEV="mmcblk0p1 ------------ external SDCARD. (SKU0)
        mmcblk0p1 ------------ internal eMMC. (SKU2)
        sda1 ----------------- external USB devices. (USB memory stick, HDD)
        eth0 ----------------- nfsroot via RJ45 Ethernet port.
        eth1 ----------------- nfsroot via USB Ethernet interface.";
TEGRABOOT="bootloader/${target_board}/nvtboot.bin";
SOSFILE="bootloader/nvtboot_recovery.bin";
WB0BOOT="bootloader/${target_board}/warmboot.bin";
FLASHER="bootloader/${target_board}/cboot.bin";
BOOTLOADER="bootloader/${target_board}/cboot.bin";
TBCFILE="bootloader/nvtboot_cpu.bin";
BPFFILE="bootloader/t210ref/sc7entry-firmware.bin";
TOSFILE="bootloader/tos.img";
EKSFILE="bootloader/eks.img";
BCT="--bct ";
VERFILENAME="qspi_bootblob_ver.txt";
OTA_BOOT_DEVICE="/dev/mtdblock0";
OTA_GPT_DEVICE="/dev/mtdblock0";
RCM_TBCFILE="bootloader/nvtboot_recovery_cpu.bin";
RCM_SOSFILE="bootloader/signed/rcm_1_encrypt.rcm";
RCM_FLASHER="bootloader/signed/nvtboot_recovery_cpu.bin.encrypt"
RCM_BCTFILE="bootloader/signed/P3448_A00_lpddr4_204Mhz_P987.bct"
